//AUTHOR: Aaron Willis
//COURSE: CPT 187
//PURPOSE: Sales Program that Creates Orders and Allows for Business Transactions
//STARTDATE: 02/17/2021

package edu.cpt187.willis.exercise6;

//Import Scanner Object
import java.util.Scanner;

public class MainClass 
{
	//Declare and initialize all MainClass CONSTANT ARRAYS with class scope
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};

	//Declare and Initialize CONSTANT INVENTORY_FILE_NAME
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	//Beginning of Main Method
	public static void main(String[] args) 
	{
		//Declare and initialize Scanner object
		Scanner input = new Scanner(System.in);

		//Declare and initialize all local variables
		String userName = "";
		char menuSelection = ' ';

		//Create an instance for the Inventory supportive class using an instantiation statement
		Inventory currentInventory = new Inventory();

		//Create an instance for the Order supportive class using an instantiation statement
		Order currentOrder = new Order();

		//Create an instance for the WriteOrder supportive class using an instantiation statement
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		//Create an Instance for the UserAccounts supportive class using an instantiation statement
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//Display Welcome Banner
		displayWelcomeBanner();

		//Display Main Menu & Validate User Input
		menuSelection = validateMenuSelection(input);

		//Run While NOT quit
		while (menuSelection != 'Q')
		{
			//Set User Account Arrays
			currentUser.setUserAccountArrays();

			//Ask User for their UserName
			userName = getUserName(input);

			//Test if menuSelection is != 'A'
			if (menuSelection != 'A')
			{
				//Assign Searched Index based on UserName
				currentUser.setSearchedIndex(userName);

				//Test if Searched Index is >= 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					//Display OVERLOADED Account Results
					displayAccountResults(userName);
				}//END of Test if Searched Index is >= 0

				//Else to Test if Searched Index is >= 0
				else
				{
					//Ask User for Password and Write to File
					currentUser.setWriteOneRecord(userName, getPassword(input));

					//Display Normal Account Results
					displayAccountResults();
				}//END of Else to Test if Searched Index is >= 0
			}//END of Test if menuSelection is != 'A'

			//Else to Test if menuSelection is != 'A'
			else
			{
				//Ask User for Password and Assign Index to it
				currentUser.setSearchedIndex(userName, getPassword(input));

				//Test if Searched Index is < 0
				if (currentUser.getSearchedIndex() < 0)
				{
					//Display Login Error
					displayLoginError();
				}//END of Test if Searched Index is < 0

				//Else to Test if Searched Index is < 0
				else
				{
					//Display File Menu and Validate User Input
					menuSelection = validateFileSelection(input);

					//Run While menuSelection is != 'R'
					while (menuSelection != 'R')
					{
						//Test if menuSelection is == 'A'
						if (menuSelection == 'A')
						{
							//Ask User for Name of File to Load
							currentInventory.setLoadItems(getFileName(input));

							//Test if Inventory Record Count <= 0
							if (currentInventory.getRecordCount() <= 0)
							{
								//Display File Error
								displayFileError();
							}//END of Test if Inventory Record Count <= 0

							//Else to Test if Inventory Record Count <= 0
							else
							{
								//Display Record Report
								displayRecordReport(currentInventory.getRecordCount());
							}//END of Else to Test if Inventory Record Count <= 0
						}//END of Test if menuSelection is == 'A'

						//Else to Test if menuSelection is == 'A'
						else
						{
							//Ask User for a Search Value and Validate
							currentInventory.setSearchIndex(validateSearchValue(input));

							//Test if Inventory Item Search Index is < 0
							if (currentInventory.getItemSearchIndex() < 0)
							{
								//Display Not Found Error
								displayNotFound();
							}//END of Test if Inventory Item Search Index is < 0

							//Else to Test if Inventory Item Search Index is < 0
							else
							{
								//Get and Set Last Item Selected Index
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());

								//Set Item ID
								currentOrder.setItemID(currentInventory.getItemIDs());

								//Set Item Price
								currentOrder.setItemPrice(currentInventory.getItemPrices());

								//SetItemName
								currentOrder.setItemName(currentInventory.getItemNames());

								//Ask User for Quantity
								currentOrder.setHowMany(validateHowMany(input));

								//Test if In Stock Count is < Desired Amount 
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									//Display Out of Stock
									displayOutOfStock();
								}//END of Test if In Stock Count is < Desired Amount

								//Else to Test if In Stock Count is < Desired Amount 
								else
								{
									//Display Discount Menu and Validate User Input
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									//Set Discount Name
									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									//Set Discount Rate
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());

									//Decrease Stock
									currentOrder.setDecreaseInStock(currentInventory);

									//Set Prize based on RNG
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									//Write to File
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									//Test if Discount Rate is > 0.0
									if (currentOrder.getDiscountRate() > 0.0)
									{
										//Display Order Report OVERLOADED with Discount Values from the Order class
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of Test if Discount Rate is > 0.0

									//Else to Test if Discount Rate is > 0.0
									else
									{
										//Display Order Report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of Else to Test if Discount Rate is > 0.0
								}//END of Else to Test if In Stock Count is < Desired Amount 
							}//END of Else to Test if Inventory Item Search Index is < 0
						}//END of Else to Test if menuSelection is == 'A'

						//Display File Menu and Update LCV 
						menuSelection = validateFileSelection(input);
					}//END of Run While menuSelection is != 'R'
				}//END of Else to Test if Searched Index is < 0
			}//END of Else to Test if menuSelection is != 'A'

			//Display Main Menu and Update LCV
			menuSelection = validateMenuSelection(input);
		}//END of Run While NOT quit

		//Load Items from Written File
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		//Test if Written Record Count is > 0
		if (orders.getRecordCount() > 0)
		{
			//Display Final Report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//END of Test if Written Record Count is > 0

		//Display Farewell Message
		displayFarewellMessage();

		//Close Scanner 
		input.close();
	}//END of Main Method

	//VOID METHOD SECTION

	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("          Welcome to the MAKE-ME-MONEY Sales Program.");
		System.out.println("     This Program Creates Orders and Updates Inventory.");
		System.out.println("            Please Enter Login Credentials to Begin.");
		System.out.println("<---------------------------------------------------------->");
	}//END of Welcome Banner

	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("\n<---------------------------------------------------------->");
		System.out.println("	  Thank you so much for trying this program.");
		System.out.println("              Please enjoy the rest of your day.");
	}//END of Farewell Message

	//Account Results
	public static void displayAccountResults()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of Account Results

	//Account Results OVERLOADED with borrowedUserName
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + borrowedUserName + ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of Account Results OVERLOADED with borrowedUserName

	//Login Error Message
	public static void displayLoginError()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of Login Error Message

	//Record Report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%1d%-8s\n", borrowedRecordCount," records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of Record Report

	//Out of Stock Error Message
	public static void displayOutOfStock()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of Out of Stock Error Message

	//File Error Message
	public static void displayFileError()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of File Error Message

	//Not Found Error Message
	public static void displayNotFound()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of Not Found Error Message

	//Display File Name Prompt
	public static void displayFileNamePrompt()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the file name with extension (i.e. file.txt): ");
	}//END of Display File Name Prompt

	//Display Search Prompt
	public static void displaySearchPrompt()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");
	}//END of Display Search Prompt

	//Display User Name Prompt
	public static void displayUserNamePrompt()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your username: ");
	}//END of Display User Name Prompt

	//Display Password Prompt
	public static void displayPasswordPrompt()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
	}//END of Display Password Prompt

	//Display How Many Prompt
	public static void displayHowManyPrompt()
	{
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter quantity: ");
	}//END of Display How Many Prompt

	//Main Menu
	public static void displayMainMenu()
	{
		//Declare and initialize local variable to use in a run while for arrays
		int localIndex = 0;

		//Display Main Menu Title
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");

		//Run while used to loop through arrays and display menu options
		while (localIndex < MENU_OPTIONS.length)
		{
			//Display lines of menu while looping through arrays and increasing localIndex
			System.out.printf("%-2c%-4s%-16s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END of run while used to loop through array and display menu options

		//Display prompt for Main Menu user selection
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of Main Menu

	//File Menu
	public static void displayFileMenu()
	{
		//Declare and initialize local variable to use in a run while for arrays
		int localIndex = 0;

		//Display Main Menu Title
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");

		//Run while used to loop through arrays and display menu options
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			//Display lines of menu while looping through arrays and increasing localIndex
			System.out.printf("%-2c%-4s%-16s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END of run while used to loop through array and display menu options

		//Display prompt for File Menu user selection
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of File Menu

	//Discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//Declare and initialize local variable to use in run while for arrays
		int localIndex = 0;

		//Display Discount Menu Title
		System.out.println("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Discount Menu");

		//Run While used to loop through arrays and display menu options
		while (localIndex < borrowedDiscountNames.length)
		{
			//Display lines of menu while looping through arrays and increasing localIndex
			System.out.printf("%-2c%-4s%-16s%9.1f%3s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100, "%");
			localIndex++;
		}//END of run while used to loop through arrays and display menu options

		//Display Prompt for Discount Menu user selection
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of Discount Menu

	//Order Report without Discount Values from the Order class
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//Display Order Report 
		System.out.println("\n\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-22s%-20s\n\n", "Customer Name: ", borrowedUserName);
		System.out.printf("%-22s%-20s\n", "Item Name: ", borrowedItemName);
		System.out.printf("%-22s%-3s%7.2f\n\n", "Item Price: ", "$", borrowedItemPrice);
		System.out.printf("%-22s%7d\n\n", "Quantity: ", borrowedHowMany);
		System.out.printf("%-22s%-3s%7.2f\n", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-22s%9.1f%3s\n", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("%-22s%-3s%7.2f\n\n", "Tax Amount: ", "$", borrowedTaxAmt);
		System.out.printf("%-22s%-3s%7.2f\n\n", "Order Total: ", "$", borrowedTotalCost);
		System.out.printf("%-22s%-20s\n\n", "Prize: ", borrowedPrizeName);
		System.out.printf("%-19s%1d%1s%1s%-16s\n", "Buy more now: Only ", borrowedInStockCount, " ", borrowedItemName, "s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of Order Report without Discount Values from the Order class

	//Order Report OVERLOADED with Discount Values from the Order class
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//Display Order Report 
		System.out.println("\n\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-22s%-20s\n\n", "Customer Name: ", borrowedUserName);
		System.out.printf("%-22s%-20s\n", "Item Name: ", borrowedItemName);
		System.out.printf("%-22s%-3s%7.2f\n\n", "Item Price: ", "$", borrowedItemPrice);
		System.out.printf("%-22s%-20s\n", "Discount Name: ", borrowedDiscountName);
		System.out.printf("%-22s%9.1f%3s\n", "Discount Rate: ", borrowedDiscountRate * 100, "%");
		System.out.printf("%-22s%-3s%7.2f\n", "Discount Amount: ", "$", borrowedDiscountAmt);
		System.out.printf("%-22s%-3s%7.2f\n\n", "Discount Price: ", "$", borrowedDiscountPrice);
		System.out.printf("%-22s%7d\n\n", "Quantity: ", borrowedHowMany);
		System.out.printf("%-22s%-3s%7.2f\n", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-22s%9.1f%3s\n", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("%-22s%-3s%7.2f\n\n", "Tax Amount: ", "$", borrowedTaxAmt);
		System.out.printf("%-22s%-3s%7.2f\n\n", "Order Total: ", "$", borrowedTotalCost);
		System.out.printf("%-22s%-20s\n\n", "Prize: ", borrowedPrizeName);
		System.out.printf("%-19s%1d%1s%1s%-16s\n", "Buy more now: Only ", borrowedInStockCount, " ", borrowedItemName, "s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of Order Report OVERLOADED with Discount Values from the Order class

	//Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		//Declare and initialize local variable to loop through arrays in run while
		int localIndex = 0;

		//Display Final Report Title
		System.out.println("\n\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");

		//Display Discount ID, NAME, PRICE, QTY, and TOTAL Titles
		System.out.printf("%-5s%-22s%-12s%-5s%-16s\n","ID", "NAME", "PRICE", "QTY", "TOTAL");

		//Run While used to loop through Arrays and display them
		while (localIndex < borrowedRecordCount)
		{
			//Display lines of report while looping through arrays and increasing localIndex
			System.out.printf("%-5d%-22s%-3s%7.2f%2s%-5d%-3s%7.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], "  ", borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//END of Run While used to loop through Arrays and display them

		//Empty space between Discount Counts and Prize Counts
		System.out.println("");

		//Display GRAND TOTAL Lines
		System.out.println("GRAND TOTAL");
		System.out.printf("%-3s%8.2f\n", "$", borrowedGrandTotal);

		//Pretty line break
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of Final Report

	//VR METHOD SECTION

	//Get User Name
	public static String getUserName(Scanner borrowedInput)
	{
		//Declare and initialize localUserName variable
		String localUserName = "";

		//Request user type in their name
		displayUserNamePrompt();
		localUserName = borrowedInput.next();

		//Return localUserName
		return localUserName;
	}//END of Get User Name

	//Get Password
	public static String getPassword(Scanner borrowedInput)
	{
		//Declare and initialize localPassword variable
		String localPassword = "";

		//Request user type in their name
		displayPasswordPrompt();
		localPassword = borrowedInput.next();

		//Return localPassword
		return localPassword;
	}//END of Get Password

	//Get File Name
	public static String getFileName(Scanner borrowedInput)
	{
		//Declare and initialize localFileName variable
		String localFileName = "";

		//Display File Name Prompt and Request user to type in the file name, then assign input value to localFileName
		displayFileNamePrompt();
		localFileName = borrowedInput.next();

		//Return localFileName
		return localFileName;
	}//END of Get File Name

	//Validate Search Value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		//Declare and initialize localSearchValue variable
		int localSearchValue = 0;

		//Display Search Value Prompt and Assign User Input to localSearchValue variable
		displaySearchPrompt();
		localSearchValue = borrowedInput.nextInt();

		//Validation Loop while localSearchValue is < 0
		while (localSearchValue < 0)
		{
			//Display Error Message
			System.out.println("\n\n*****INVALID INPUT*****");

			//Display the Search Value Prompt Again and Update the LCV
			displaySearchPrompt();
			localSearchValue = borrowedInput.nextInt();
		}//END of Validation Loop while localSearchValue is < 0

		//Return localSearchValue
		return localSearchValue;
	}//END of Validate Search Value

	//Validate Main Menu
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		//Declare and initialize local selection variable
		char localSelection = ' ';

		//Display Main Menu
		displayMainMenu();

		//Assign input to localSelection variable to get a Prime Read
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Validation loop while localSelection is NOT 'A' && localSelection is NOT 'B' localSelection is NOT 'Q'
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			//Display Error Message
			System.out.println("\n\n*****INVALID INPUT*****");

			//Display Main Menu again
			displayMainMenu();

			//Update the LCV and get a new Prime Read
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop Validation loop while localSelection is NOT 'A' && localSelection is NOT 'B' localSelection is NOT 'Q'

		//Return localSelection
		return localSelection;
	}//END of Validate Main Menu

	//Validate How Many
	public static String validateHowMany(Scanner borrowedInput)
	{
		//Declare and initialize localHowMany variable 
		String localHowMany = "";

		//Get quantity of product to be purchased from user input and assign to local variable
		displayHowManyPrompt();
		localHowMany = borrowedInput.next();

		//Run While localHowMany variable is <= 0
		while (Integer.parseInt(localHowMany) <= 0)
		{
			//Display Error Message
			System.out.println("\n\n*****INVALID INPUT*****");

			//Update the LCV and get a new Prime Read
			displayHowManyPrompt();
			localHowMany = borrowedInput.next();
		}//END of Run While localHowMany variable is <= 0

		//Return localHowMany
		return localHowMany;	
	}//END of Validate How Many

	//Validate File Menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		//Declare and initialize local selection variable
		char localSelection = ' ';

		//Display File Menu
		displayFileMenu();

		//Assign input to localSelection variable to get a Prime Read
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Validation loop while localSelection is NOT 'A' && localSelection is NOT 'B' localSelection is NOT 'R'
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			//Display Error Message
			System.out.println("\n\n*****INVALID INPUT*****");

			//Display File Menu again
			displayFileMenu();

			//Update the LCV and get a new Prime Read
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop Validation loop while localSelection is NOT 'A' && localSelection is NOT 'B' localSelection is NOT 'R'

		//Return localSelection
		return localSelection;
	}//END of Validate File Menu

	//Validate Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//Declare and initialize localSelection variable
		char localSelection = ' ';

		//Display Discount Menu
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

		//Assign user input to localSelection variable to get a Prime Read
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Run While localSelection in NOT 'A' && NOT 'B' && NOT 'C'
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			//Display Error Message
			System.out.println("\n\n*****INVALID INPUT*****");

			//Display Discount Menu again
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

			//Update the LCV and get a new Prime Read
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of Run while localSelection is NOT 'A' && localSelection != 'B' && localSelection != 'C'

		//Return localSelection
		return localSelection;	
	}//END of Validate Discount Menu
}//END of MainClass
